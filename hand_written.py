# -*- coding: utf-8 -*-
"""HAND_WRITTEN.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/15SHwR2vfRHwpUPsWM6RMjJpvYwHnnlXF
"""

import numpy as np
import matplotlib.pyplot as plt
from sklearn.datasets import fetch_openml
from sklearn.linear_model import LogisticRegression
from sklearn.model_selection import train_test_split
from sklearn.metrics import classification_report, confusion_matrix
from sklearn.preprocessing import StandardScaler
from sklearn.multiclass import OneVsRestClassifier
import cv2

X, y = fetch_openml('mnist_784', version=1, return_X_y=True, as_frame=False)
y = y.astype(int)

print("Dataset shape:", X.shape)
print("First label:", y[0])

plt.imshow(X[0].reshape(28, 28), cmap='gray')
plt.title(f"Label: {y[0]}")
plt.axis('off')
plt.show()

X_train, X_test, y_train, y_test = train_test_split(
    X, y, test_size=0.2, random_state=42
)

scaler = StandardScaler()
X_train_scaled = scaler.fit_transform(X_train)
X_test_scaled = scaler.transform(X_test)

model = OneVsRestClassifier(LogisticRegression(max_iter=2000, solver='lbfgs'))
model.fit(X_train_scaled, y_train)

y_pred = model.predict(X_test_scaled)

print("Confusion Matrix:\n", confusion_matrix(y_test, y_pred))
print("\nClassification Report:\n", classification_report(y_test, y_pred))

def preprocess_custom_image(img_path):
    # Load image in grayscale
    img = cv2.imread(img_path, cv2.IMREAD_GRAYSCALE)

    if img is None:
        raise ValueError(f"Image not found at path: {img_path}")

    # Resize to 28x28
    img_resized = cv2.resize(img, (28, 28))

    # Invert (white digit on black background like MNIST)
    img_inverted = cv2.bitwise_not(img_resized)

    # Show the preprocessed image
    plt.imshow(img_inverted, cmap='gray')
    plt.title("Preprocessed Input Image")
    plt.axis('off')
    plt.show()

    # Flatten to 1D array (1, 784) and scale
    img_flat = img_inverted.reshape(1, -1).astype('float32')
    img_scaled = scaler.transform(img_flat)

    return img_scaled

image_path = '/content/1.png'  # üîÅ Replace this with your actual image path

try:
    custom_input = preprocess_custom_image(image_path)
    prediction = model.predict(custom_input)
    print(f"Predicted Digit: {prediction[0]}")
except Exception as e:
    print("Error:", e)